## theoretical bound vs. actual bound
# Quantile and coverage comparison for max vs just a point.
#######################
source("~/Desktop/Conf/dumbgun_wellner/get_bds_dw.R")
prop = c(0.2, 0.5, 0.8)
n_samp = 10000
n_data = 50
### matrix with miscoverage for each sample size, and each sample run
kl_miscov_sin1_data = matrix( data = NA, nrow = n_data , ncol = n_samp)
kl_miscov_sin2_data = matrix( data = NA, nrow = n_data , ncol = n_samp)
kl_miscov_sin3_data = matrix( data = NA, nrow = n_data , ncol = n_samp)
v = 3/4
quant_df = read.csv(file = "~/Desktop/Conf/dumbgun_wellner/quant_df.csv")
quant_df  = as.data.frame(quant_df)
for( n in (1:n_data)*100)
{
print(n)
n_val = n
quant_val_n = quant_df  %>% filter(n == n_val) %>% select(X0.2) %>% as.numeric()
sin_idx = ceiling(prop*n)
t_n = (1:n)/(n+1)
for( j in 1: n_samp)
{
U_sort = sort(runif(n))
kl_fail_sin1 = 0
kl_fail_sin2 = 0
kl_fail_sin3 = 0
kl_fail_sin1 = ifelse( (n+1)*KL_dw(t_n[sin_idx[1]], U_sort[sin_idx[1]]) - C_dw(t_n[sin_idx[1]]) - v*D_dw(t_n[sin_idx[1]]) > quant_val_n,
1, 0)
kl_fail_sin2 = ifelse( (n+1)*KL_dw(t_n[sin_idx[2]], U_sort[sin_idx[2]]) - C_dw(t_n[sin_idx[2]]) - v*D_dw(t_n[sin_idx[2]]) > quant_val_n,
1, 0)
kl_fail_sin3 = ifelse( (n+1)*KL_dw(t_n[sin_idx[3]], U_sort[sin_idx[3]]) - C_dw(t_n[sin_idx[3]]) - v*D_dw(t_n[sin_idx[3]]) > quant_val_n,
1, 0)
kl_miscov_sin1_data[n/100, j] = kl_fail_sin1
kl_miscov_sin2_data[n/100, j] = kl_fail_sin2
kl_miscov_sin3_data[n/100, j] = kl_fail_sin3
}
}
#####################################################################
#####################################################################
apply(kl_miscov_sin1_data, 1, mean)
apply(kl_miscov_sin2_data, 1, mean)
apply(kl_miscov_sin3_data, 1, mean)
############################# theoretical bound
theory_bd = matrix(nrow = 3, ncol = n_data)
quant_df_val = quant_df %>% filter(n <= 100*n_data )  %>% .$X0.2 %>% as.numeric()
inside_phi = matrix(nrow = 3, ncol = n_data)
for( i in 1:3)
{
p_val = prop[i]
inside_phi[i,] = sqrt(2*( C_dw(p_val) + v*D_dw(p_val) + quant_df_val)) + ( C_dw(p_val) + v*D_dw(p_val) + quant_df_val)/sqrt( p_val*(1-p_val)*(1:n_data)*100 +1 )
theory_bd[i,] = 2- 2*pnorm( inside_phi[i,])
}
inside_phi_asymp1 = rep(sqrt(2*( C_dw(p_val) + v*D_dw(p_val) + quant_df_val[n_data] )), n_data)
theory_bd_asymp1 = 2 - 2*pnorm(inside_phi_asymp1)
inside_phi_asymp = sqrt(2*( C_dw(p_val) + v*D_dw(p_val) + quant_df_val ))
theory_bd_asymp = 2 - 2*pnorm(inside_phi_asymp)
############################### plots
plot( x = (1:n_data)*100, y =theory_bd[1,] ,
ylim = c(0,0.04), xlab= "n", ylab = "miscoverage", main = "theoretic bound, alpha = 0.2", type = "l",
col = "red", lty = 2)
points( x = (1:n_data)*100, y =theory_bd[2,] ,
ylim = c(0,0.05), xlab= "n", ylab = "miscoverage", main = "theoretic bound, alpha = 0.2", type = "l",
col = "blue", lty = 2)
points( x = (1:n_data)*100, y =theory_bd[3,] ,
ylim = c(0,0.05), xlab= "n", ylab = "miscoverage", main = "theoretic bound, alpha = 0.2", type = "l",
col = "green", lty = 3)
points( x = (1:n_data)*100, y =theory_bd_asymp1 ,
ylim = c(0,0.05), xlab= "n", ylab = "miscoverage", main = "theoretic bound, alpha = 0.2", type = "l",
col = "black", lty = 1)
points( x = (1:n_data)*100, y = apply(kl_miscov_sin1_data, 1, mean), col = "red", type = "l")
points( x = (1:n_data)*100, y = apply(kl_miscov_sin2_data, 1, mean), col = "blue", type = "l")
points( x = (1:n_data)*100, y = apply(kl_miscov_sin3_data, 1, mean), col = "green", type = "l")
legend("topright", legend=c("theory 0.2", "0.2n","theory 0.5", "0.5n","theory 0.8", "0.8n", "asymp"),
col=c(rep(c("red" ,"blue","green"),each = 2), "black"), lty=c( rep(c(2,1),3), 1) , cex=0.8)
plot( inside_phi[1,] - inside_phi_asymp1, ylim = c(-0.2,0.4))
plot( inside_phi[2,] - inside_phi_asymp1, ylim = c(-0.2,0.4))
plot( inside_phi[3,] - inside_phi_asymp1, ylim = c(-0.2,0.4))
plot( inside_phi_asymp - inside_phi_asymp1, ylim = c(-0.2,0.4))
paste("~/quant_df_", N_n ,".csv", sep = "")
N_n = 10
paste("~/quant_df_", N_n ,".csv", sep = "")
library(dplyr)
N_n = 10
#########################
KL_dw = function(p,q){
if(length(p)!= length(q))
{
print("p and q length not same")
stop()
}
val = numeric(length(p))
for( i in 1:length(p))
{
val[i] = p[i]*log(p[i]/q[i]) + (1-p[i])*log((1-p[i])/(1-q[i]))
if( p[i] == 0 ){val[i] = log(1/(1-q[i]))}
if( p[i] == 1 ){val[i] = log(1/q[i]) }
if( q[i] == 0 ){val[i] = Inf }
if( q[i] == 1 ){val[i] = Inf}
if( p[i] == 0 & q[i] == 0 ){val[i] = 0}
if( p[i] == 1 & q[i] == 0 ){val[i] = Inf }
if( p[i] == 0 & q[i] == 1 ){val[i] = Inf }
if( p[i] == 1 & q[i] == 1 ){val[i] = 0}
}
return(val)
}
#########################
C_dw = function(t)
{
return( log( 1 - log(2*t) - log(2*(1-t)) ) )
}
#########################
D_dw = function(t)
{
return( log(1 + (C_dw(t))^2) )
}
############################
quant_df = matrix( data = NA , nrow = N_n, ncol = 19)
quant_df = data.frame(quant_df)
colnames(quant_df) = (1:19/20)
n_runs = 10000
alpha = 1:19/20
v = 3/4
for( i_n in 1:N_n)
{
#print(i_n)
n = 100*i_n
sam = numeric(n_runs)
t_n = (1:n)/(n+1)
for( i in 1:n_runs)
{
U_sort = sort( runif(n))
sam[i] = max( (n+1)*KL_dw(t_n, U_sort) - C_dw(t_n) - v*D_dw(t_n) )
}
n_cuttoff = ceiling(n_runs*(1-alpha))
quant_df[i_n,] = (sort(sam)[n_cuttoff])
}
library(dplyr)
N_n = 10
#########################
KL_dw = function(p,q){
if(length(p)!= length(q))
{
print("p and q length not same")
stop()
}
val = numeric(length(p))
for( i in 1:length(p))
{
val[i] = p[i]*log(p[i]/q[i]) + (1-p[i])*log((1-p[i])/(1-q[i]))
if( p[i] == 0 ){val[i] = log(1/(1-q[i]))}
if( p[i] == 1 ){val[i] = log(1/q[i]) }
if( q[i] == 0 ){val[i] = Inf }
if( q[i] == 1 ){val[i] = Inf}
if( p[i] == 0 & q[i] == 0 ){val[i] = 0}
if( p[i] == 1 & q[i] == 0 ){val[i] = Inf }
if( p[i] == 0 & q[i] == 1 ){val[i] = Inf }
if( p[i] == 1 & q[i] == 1 ){val[i] = 0}
}
return(val)
}
#########################
C_dw = function(t)
{
return( log( 1 - log(2*t) - log(2*(1-t)) ) )
}
#########################
D_dw = function(t)
{
return( log(1 + (C_dw(t))^2) )
}
############################
quant_df = matrix( data = NA , nrow = N_n, ncol = 19)
quant_df = data.frame(quant_df)
colnames(quant_df) = (1:19/20)
n_runs = 10000
alpha = 1:19/20
v = 3/4
for( i_n in 1:N_n)
{
print(i_n)
n = 100*i_n
sam = numeric(n_runs)
t_n = (1:n)/(n+1)
for( i in 1:n_runs)
{
U_sort = sort( runif(n))
sam[i] = max( (n+1)*KL_dw(t_n, U_sort) - C_dw(t_n) - v*D_dw(t_n) )
}
n_cuttoff = ceiling(n_runs*(1-alpha))
quant_df[i_n,] = (sort(sam)[n_cuttoff])
}
quant_df = quant_df %>% mutate( n = 100*(1:N_n))   %>% select(n, everything())
B = 1:100000
c_rand = 2
conf_val = 0.8
comp_max = numeric(10000)
for( i in 1:10000)
comp_max = max(c_rand*(1 - conf_val^(1/B)) + B )
B = 1:100000
c_rand = 2
conf_val = 0.8
comp_max = numeric(10000)
for( i in 1:10000)
comp_max = min(c_rand*(1 - conf_val^(1/B)) + B )
#source("~/Desktop/Conf/dumbgun_wellner_new/dw_quantile_gen1.R")
source("~/Documents/Projects/Conf/dumbgun_wellner_new/dw_quantile_gen1.R")
fin_func_dw = function(p,q,quant,v = 3/2,n)
{
return(KL_dw(p,q) - ((C_v_dw(p,q,v = v)+ quant)/n)  )
}
get_bds_dw = function(alpha = 0.05, n, v = 3/2, quant_val = NA)
{
if(is.na(quant_val))
{
dw_quant_val = dw_quant(alpha = alpha, n = n, v = v)
}else{
dw_quant_val = quant_val
}
bds_dw = data.frame(low = rep(NA, n),
up = rep(NA, n))
t_n = (1:n)/n
#t_n_shift = (0:(n-1))/n
for(i in 1:(n-1))
{
### upper bound
if( fin_func_dw(p = t_n[i], q = 1-10^(-10), quant = dw_quant_val, v = v, n = n) < 0 ){
temp_up = 1
}else{
temp_up = uniroot( fin_func_dw, lower = t_n[i] , upper = 1-10^(-10),
p = t_n[i], quant = dw_quant_val, v=v, n = n, tol = 10^-10 )$root
}
bds_dw$up[i]  = temp_up
bds_dw$low[n-i] = 1 - temp_up
}
#### upper for i = n
bds_dw$up[n] = 1
### upper bound for i = 0
if( fin_func_dw(p = 0, q = 1-10^(-10), quant = dw_quant_val, v = v, n = n) < 0 ){
temp_up_0 = 1
}else{
temp_up_0 = uniroot( fin_func_dw, lower = 0 , upper = 1-10^(-10),
p = 0, quant = dw_quant_val, v=v, n = n, tol = 10^-10 )$root
}
##### upper for i = 0
bds_dw$low[n] = 1 - temp_up_0
return(bds_dw)
}
get_bds_dw(alpha = 0.1, n = 30)
qq = get_bds_dw(alpha = 0.1, n = 30)
plott(qq$low)
plot(qq$low)
points(qq$up, col = "red")
