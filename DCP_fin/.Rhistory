del = 0.1
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 =
y = fun(al)
sum(y*eps)
eps = 0.000001
del = 0.1
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 =
y = fun(al)
sum(y*eps)
eps = 0.000001
del = 0.1
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.1
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.2
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.2
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.4
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.4
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
eps = 0.000001
del = 0.4
al = seq(from = eps, to = 1-eps, by = eps)
fun = function(al){ return( pnorm(sqrt( log(2/del)/(2*(al)*(1-al)))) ) }
fun1 = function(al){ return( pnorm( sqrt(2*(C_dw(al) + 1.5*(D_dw(al)) + 2.72 )))) }
y = fun(al)
y1 = fun1(al)
sum(y*eps)
sum(y1*eps)
length(seq(4000, 7000, by=300))
?install.packages
getwd()
setwd("./")
library(ggplot2)
library(dplyr)
setwd("~/Desktop/Conf/DCP_fin")
df_dcp_1 = read.csv("~/Desktop/Conf/azure/server_out/df_dcp.csv")[,-1] %>% as.data.frame()
df_dcp_2 = read.csv("~/Desktop/Conf/azure/server_out/df_dcp_miss.csv")[,-1] %>% as.data.frame()
df_dcp_1 = rbind( df_dcp_1, df_dcp_2)
df_dcp_1 %>%
ggplot(mapping = aes(x = alpha, y = diff_coverage, color = Method)) +
geom_line(aes(group = simul_id),alpha = 0.3,
show.legend = FALSE) +
facet_grid(~ Method) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
geom_hline(yintercept = 0,linetype = 2) +
ylab(expression(paste("Coverage - (1 -", alpha, ")", sep=""))) +
ggtitle(expression(paste("Coverage of methods with ",
delta," = 0.1" ,sep = "")),
subtitle = expression(paste("(difference with (1-",alpha,"))", sep = ""))) +
theme(text = element_text(size = 13))
df_dcp_1 %>%
ggplot(mapping = aes(x = alpha, y = ratio_width, color = Method)) +
geom_line(aes(group = simul_id), alpha = 0.3,
show.legend = FALSE) +
facet_grid(~ Method) +
geom_hline(yintercept = 1,linetype = 2) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("Width / Width(true quantiles)") +
ggtitle(expression(paste("Width of prediction set across methods with ",
delta," = 0.1", sep = "" )),
subtitle = "(ratio to true quantile widths)") +
theme(text = element_text(size = 13))
M = 10000
method_names = df_dcp_1$Method %>% unique()
df_prop_cross = data.frame(Method = rep(method_names, each = M), simul_id = rep(1:M, 4))
df_prop_cross = cbind(df_prop_cross, matrix(nrow = 4*M, ncol = 19))
df_prop_cross_full =  data.frame(Method = rep(method_names, each = M),
simul_id = rep( 1:M, 4),
flag_if_cross = rep(NA,4*M))
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = (4*M), # Maximum value of the progress bar
style = 1,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
for( idx in 1:(4*M))
{
temp_method_name = df_prop_cross$Method[idx]
temp_simul_id = df_prop_cross$simul_id[idx]
temp_df_diff_cov = df_dcp_1 %>% filter(Method == temp_method_name, simul_id == temp_simul_id ) %>% .$diff_coverage
df_prop_cross[idx,3:21] = as.numeric( temp_df_diff_cov >= 0)
df_prop_cross_full$flag_if_cross[idx] = prod(temp_df_diff_cov>=0)
setTxtProgressBar(pb, idx)
}
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = (4*M), # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
for( idx in 1:(4*M))
{
temp_method_name = df_prop_cross$Method[idx]
temp_simul_id = df_prop_cross$simul_id[idx]
temp_df_diff_cov = df_dcp_1 %>% filter(Method == temp_method_name, simul_id == temp_simul_id ) %>% .$diff_coverage
df_prop_cross[idx,3:21] = as.numeric( temp_df_diff_cov >= 0)
df_prop_cross_full$flag_if_cross[idx] = prod(temp_df_diff_cov>=0)
setTxtProgressBar(pb, idx)
}
df_prop_cross_full =  df_prop_cross_full %>% group_by(Method) %>% summarise( prop_if_cross_full := 1- mean(flag_if_cross) )
colnames(df_prop_cross)[3:21] = paste("flag_al",1:19, sep="")
df_prop_cross_al = df_prop_cross %>% group_by(Method) %>% summarise( prop_if_cross1 := 1- mean(flag_al1) )
df_prop_cross_sd = df_prop_cross %>% group_by(Method) %>% summarise( sd_if_cross1 := sd(flag_al1) )
for(idx in 2:19)
{
temp_name = paste("prop_if_cross", idx, sep="")
temp_al = paste("flag_al", idx ,sep = "")
df_prop_cross_al = cbind(df_prop_cross_al,
df_prop_cross %>% group_by(Method) %>% summarise( {{temp_name}} := 1- mean(.data[[temp_al]]) )%>% .[,-1])
temp_name = paste("sd_if_cross", idx, sep="")
df_prop_cross_sd = cbind(df_prop_cross_sd,
df_prop_cross %>% group_by(Method) %>% summarise( {{temp_name}} := sd(.data[[temp_al]]) )%>% .[,-1])
}
####################################################################
source("~/Desktop/Conf/dumbgun_wellner/get_bds_dw.R")
####################################################################
alpha_n = 1:19/20
theory_bd_dkw = pnorm( sqrt(log(2/0.1)/(2*(alpha_n)*(1- alpha_n))) )
theory_bd_dkw_fs = 1 - (0.05)^(1/(4*alpha_n*(1- alpha_n)))
del_m_dkw = (1/10000 + sqrt( log(20)/(20000)))/3
theory_bd_dkw_fs1 = numeric(length(alpha_n))
for(i in 1:19)
{
if(alpha_n[i]<1/2){
alpha_temp = alpha_n[i]
print("<")
} else if(alpha_n[i]>1/2 + del_m_dkw){
alpha_temp = alpha_n[i] - del_m_dkw
print(">")
}else{
alpha_temp = 1/2
print("=")
}
theory_bd_dkw_fs1[i] = 1 - (0.05)^(1/(4*alpha_temp*(1- alpha_temp)))
}
plot( y = 1- df_prop_cross_al[1,-1] , x = alpha_n, ylim = c(0.95,1),
ylab = "prop", xlab = "alpha", main = "DKW, delta = 0.1", type = "l",lty = 2)
points( y = 1- df_prop_cross_al[1,-1] , x = alpha_n, ylim = c(0.95,1))
points(y = theory_bd_dkw, x = alpha_n, col = "red", type = "l")
points(y = theory_bd_dkw_fs1, x = alpha_n, col = "green", type = "l")
legend("bottomright", legend=c("asymp theory", "empirical", "fin sample using beta"),
col=c("red", "black", "green"), lty=c(1,2,1), cex=0.8)
quant_df = read.csv(file = "~/Desktop/Conf/dumbgun_wellner/quant_df_one_10000.csv")
quant_df_val  = as.data.frame(quant_df)[2] %>% as.numeric()
v = 3/2
theory_bd_dw = pnorm(sqrt( 2*( C_dw(1-alpha_n) + v*D_dw(1-alpha_n) + quant_df_val)))
theory_bd_dw_fs = 1 - exp( - C_dw(1-alpha_n) - v*D_dw(1-alpha_n) - quant_df_val )
bds_dw_1 =  get_bds_dw(alpha = 0.1, n = 10000, v = v, quant_val = quant_df_val)
del_m_dw = max(bds_dw_1$up-bds_dw_1$low)/2
theory_bd_dw_fs1 = numeric(length(alpha_n))
for(i in 1:19)
{
if(alpha_n[i]<1/2){
alpha_temp = alpha_n[i]
print("<")
} else if(alpha_n[i]>1/2 + del_m_dw){
alpha_temp = alpha_n[i] - del_m_dw
print(">")
}else{
alpha_temp = 1/2
print("=")
}
theory_bd_dw_fs1[i] = 1 - exp( - C_dw(1-alpha_temp) - v*D_dw(1-alpha_temp) - quant_df_val )
}
plot( y = 1- df_prop_cross_al[2,-1] , x = alpha_n, ylim = c(0.95,1),
ylab = "prop", xlab = "alpha", main = "DW, delta = 0.1", type = "l",lty = 2)
points( y = 1- df_prop_cross_al[2,-1] , x = alpha_n, ylim = c(0.95,1))
points(y = theory_bd_dw, x = alpha_n, col = "red", type = "l")
points(y = theory_bd_dw_fs1, x = alpha_n, col = "green", type = "l")
points(y = theory_bd_dw_fs, x = alpha_n, col = "yellow", type = "l")
legend("bottomright", legend=c("asymp theory", "empirical", "fin sample using beta"),
col=c("red", "black", "green"), lty=c(1,2,1), cex=0.8)
df_plot = data.frame(Method = rep(c("DKW univ","DW univ"), each = 38),
alpha = rep(alpha_n , 4),
delta= rep(rep(c("Empirical","Lower bound"),each = 19), 2),
value = c( 1 - ((df_prop_cross_al[1,-1]) %>% as.numeric()), theory_bd_dkw_fs1,
1 - ((df_prop_cross_al[2,-1]) %>% as.numeric()), theory_bd_dw_fs1)
)
plt_fix_al = df_plot %>%
ggplot(mapping = aes(x = alpha, y = value, color = delta)) +
geom_line(aes(group = delta)) +
facet_grid(~ Method) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
theme(text = element_text(size = 10))
plt_fix_al
df_plot %>%
ggplot(mapping = aes(x = alpha, y = value, color = Method,
linetype = delta)) +
geom_line(aes(group = interaction(delta,Method)) ) +
geom_hline(yintercept = 0.95) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("Probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
labs(linetype = "") +
theme(text = element_text(size = 10))
df_plot_sd = data.frame(Method = rep(c("DKW univ","DW univ"), each = 38),
alpha = rep(alpha_n , 4),
delta= rep(rep(c("Empirical","Theoretical lower bound"),each = 19), 2),
value = c( 1 - ((df_prop_cross_al[1,-1]) %>% as.numeric()), theory_bd_dkw_fs1,
1 - ((df_prop_cross_al[2,-1]) %>% as.numeric()), theory_bd_dw_fs1))
df_plot_sd = df_plot_sd %>% mutate(up = qbinom(0.9, prob = value, size = 1000)/1000)
df_plot_sd = df_plot_sd %>% mutate(low = qbinom(0.1, prob = value, size = 1000)/1000)
df_plot_sd = df_plot_sd %>% mutate(sd = sqrt(value*(1-value)/1000))
df_plot_sd[(df_plot_sd$delta != "Empirical"), "up"] = df_plot_sd[(df_plot_sd$delta != "Empirical"), "value"]
df_plot_sd[(df_plot_sd$delta != "Empirical"), "low"] = df_plot_sd[(df_plot_sd$delta != "Empirical"), "value"]
df_plot_sd[(df_plot_sd$delta != "Empirical"), "sd"] = 0
ggplot() +
geom_line(df_plot_sd,
mapping = aes(x = alpha, y = up, group = delta), linetype = "dashed") +
geom_line(df_plot_sd,
mapping = aes(x = alpha, y = value - sd, group = delta), linetype = "dashed") +
geom_line(df_plot_sd,
mapping = aes(x = alpha, y = value, group = delta, color = delta)) +
facet_grid(~ Method) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
theme(text = element_text(size = 10))
df_plot %>%
ggplot(mapping = aes(x = alpha, y = value, color = Method,
linetype = delta)) +
geom_line(aes(group = interaction(delta,Method)) ) +
geom_hline(yintercept = 0.95) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("Probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
labs(linetype = "") +
theme_bw() +
theme(text = element_text(size = 10))
df_plot %>%
ggplot(mapping = aes(x = alpha, y = value, color = Method,
linetype = delta)) +
geom_line(aes(group = interaction(delta,Method)) ) +
geom_hline(yintercept = 0.95) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("Probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
labs(linetype = "") +
theme_cowplot() +
theme(text = element_text(size = 10))
library(cowplot)
df_plot %>%
ggplot(mapping = aes(x = alpha, y = value, color = Method,
linetype = delta)) +
geom_line(aes(group = interaction(delta,Method)) ) +
geom_hline(yintercept = 0.95) +
scale_x_continuous(breaks = seq(1/20, 19/20, by = 0.2)) +
ylab("Probability") +
ggtitle(expression(paste("P( Coverage ">="1-",alpha," ) for fixed ", alpha, " with ", delta, " = 0.1 ",  sep = "")),
subtitle = expression(paste(" Number of simulations = 1000", sep ="" )) ) +
theme(legend.position="bottom") +
labs(linetype = "") +
theme_cowplot() +
theme(text = element_text(size = 10))
###################### DKW ######################
get_bds_dkw_simp = function(alpha = 0.05, n)
{
bds_dkw_simp = data.frame(low = rep(NA, n),
up = rep(NA, n))
bds_dkw_simp$low = (1:n)/n - sqrt(( log(2) - log(alpha))/(2*n))
bds_dkw_simp$up = (1:n)/n + sqrt(( log(2) - log(alpha))/(2*n))
bds_dkw_simp$low[ bds_dkw_simp$low < 0] = 0
bds_dkw_simp$up[ bds_dkw_simp$up > 1] = 1
return(bds_dkw_simp)
}
###################### DW ######################
source("~/Desktop/Conf/dumbgun_wellner/dw_quantile_gen.R")
fin_func_dw = function(p,q,quant,v = 3/2,n)
{
return(KL_dw(p,q) - ((C_dw(p) + v*D_dw(p) + quant)/(n+1)) )
}
get_bds_dw = function(alpha = 0.05, n, v = 3/2, quant_val = NA)
{
if(is.na(quant_val))
{
dw_quant_val = dw_quant(alpha = alpha, n = n, v = v)
}else{
dw_quant_val = quant_val
}
bds_dw = data.frame(low = rep(NA, n),
up = rep(NA, n))
t_n = (1:n)/(n+1)
for( i in 1:n)
{
### lower bound
if( fin_func_dw(p = t_n[i], q = 10^(-10), quant = dw_quant_val, v = v, n = n) < 0 ){
bds_dw$low[i] = 0
}else{
bds_dw$low[i] = uniroot( fin_func_dw, lower = 10^(-10) , upper = t_n[i],
p = t_n[i], quant = dw_quant_val, v = v, n = n , tol = 10^-10  )$root
}
### upper bound
if( fin_func_dw(p = t_n[i], q = 1-10^(-10), quant = dw_quant_val, v = v, n = n) < 0 ){
bds_dw$up[i] = 1
}else{
bds_dw$up[i] = uniroot( fin_func_dw, lower = t_n[i] , upper = 1-10^(-10),
p = t_n[i], quant = dw_quant_val, v=v, n = n, tol = 10^-10 )$root
}
}
bds_dw$low[bds_dw$low<0] = 0
bds_dw$up[bds_dw$up>1] = 1
return(bds_dw)
}
###################### Asymptotic Eicker ######################
log2 = function(x)
{return(log(log(x)))}
log3 = function(x)
{return(log(log(log(x))))}
get_bds_eic = function(alpha = 0.05, n)
{
bds_eic = data.frame(low = rep(NA, n),
up = rep(NA, n))
t_eic = log( -2/(sqrt(pi)*log(1-alpha)) )
t_eic_n = (2*log2(n))^(1/2)*( 1 + ((log3(n) + 2*t_eic)/(4*log2(n))) )
bds_eic$low = (1:n)/n -  t_eic_n*sqrt((1:n)*(n - (1:n)))/n^(1.5)
bds_eic$up = (1:n)/n + t_eic_n*sqrt((1:n)*(n - (1:n)))/n^(1.5)
bds_eic$low[1] = 0
bds_eic$low[n] = bds_eic$low[n-1]
bds_eic$up[1] = bds_eic$up[2]
bds_eic$up[n] = 1
bds_eic$low[ bds_eic$low < 0] = 0
bds_eic$up[ bds_eic$up > 1] = 1
return(bds_eic)
}
###################### EIC with all indices ######################
get_bds_eic1 = function(alpha = 0.05, n)
{
bds_eic = data.frame(low = rep(NA, n),
up = rep(NA, n))
t_eic = log( -2/(sqrt(pi)*log(1-alpha)) )
t_eic_n = (2*log2(n))^(1/2)*( 1 + ((log3(n) + 2*t_eic)/(4*log2(n))) )
bds_eic$low = (1:n)/(n+1) -  t_eic_n*sqrt( (1:n)*(n + 1 - (1:n)))*(n+1)^(-1)*(n+2)^(-0.5)
bds_eic$up = (1:n)/(n+1) + t_eic_n*sqrt( (1:n)*(n + 1 - (1:n)))*(n+1)^(-1)*(n+2)^(-0.5)
bds_eic$low[ bds_eic$low < 0] = 0
bds_eic$up[ bds_eic$up > 1] = 1
return(bds_eic)
}
###################### Asymptotic AD ######################
fin_func_ad = function(p,q,quant,n)
{
if(p==q){
temp = -quant
}else{
temp = abs( sqrt(n)*(p-q)/(sqrt(q)*sqrt(1-q))) - quant
}
return(temp)
}
get_bds_ad = function(alpha = 0.05, n)
{
bds_ad = data.frame(low = rep(NA, n),
up = rep(NA, n))
t_ad = log( -2/(sqrt(pi)*log(1-alpha)) )
t_ad_n = (2*log2(n))^(1/2)*( 1 + ((log3(n) + 2*t_ad)/(4*log2(n))) )
t_n = (1:n)/(n)
for( i in 2:(n-1))
{
### lower bound
if( fin_func_ad(p = t_n[i], q = 10^(-10), quant = t_ad_n, n = n) < 0 ){
bds_ad$low[i] = 0
}else{
bds_ad$low[i] = uniroot( fin_func_ad, lower = 10^(-10) , upper = t_n[i],
p = t_n[i], quant = t_ad_n, n = n, tol = 10^-10  )$root
}
### upper bound
if( fin_func_ad(p = t_n[i], q = 1-10^(-10), quant = t_ad_n, n = n) < 0 ){
bds_ad$up[i] = 1
}else{
bds_ad$up[i] = uniroot( fin_func_ad, lower = t_n[i] , upper = 1-10^(-10),
p = t_n[i], quant = t_ad_n, n = n, tol = 10^-10 )$root
}
}
bds_ad$low[1] = 0
bds_ad$low[n] = bds_ad$low[n-1]
bds_ad$up[1] = bds_ad$up[2]
bds_ad$up[n] = 1
bds_ad$low[ bds_ad$low < 0] = 0
bds_ad$up[ bds_ad$up > 1] = 1
return(bds_ad)
}
###################### Simes ######################
get_bds_simes = function(alpha = 0.05, n , k_low = NA, k_up = NA)
{
if(is.na(k_low)){k_low = n/2}
if(is.na(k_up)){k_up = n/2}
bds_simes = data.frame(low = rep(NA, n),
up = rep(NA, n))
for( i in 1:n)
{
bds_simes$low[i] = (alpha/2)^(1/k_low)*((prod(i: (i-k_low+1)))/(prod(n:(n-k_low+1))))^(1/k_low)
bds_simes$up[n-i+1] = 1- (alpha/2)^(1/k_up)*((prod(i: (i-k_up+1)))/(prod(n:(n-k_up+1))))^(1/k_up)
}
bds_simes$low[bds_simes$low<0] = 0
bds_simes$up[bds_simes$up>1] = 1
return(bds_simes)
}
##################################
n = 100
get_bds_dw_n = get_bds_dw(n = n, alpha = 0.1) %>% mutate("Empirical.CDF.values" = 1:n/n) %>% mutate(Method = "DW")
get_bds_dw_n = get_bds_dw_n  %>% rename("lower.bound" = "low",
"upper.bound" = "up")
get_bds_dkw_n = get_bds_dkw_simp(n = n, alpha = 0.1) %>% mutate("Empirical.CDF.values" = 1:n/n) %>% mutate(Method = "DKW")
get_bds_dkw_n = get_bds_dkw_n  %>% rename("lower.bound" = "low",
"upper.bound" = "up")
get_bds_eic_n = get_bds_eic1(n = n, alpha = 0.1) %>% mutate("Empirical.CDF.values" = 1:n/n) %>% mutate(Method = "Eicker")
get_bds_eic_n = get_bds_eic_n  %>% rename("lower.bound" = "low",
"upper.bound" = "up")
get_bds_ad_n = get_bds_ad(n = n, alpha = 0.1) %>% mutate("Empirical.CDF.values" = 1:n/n) %>% mutate(Method = "AD")
get_bds_ad_n = get_bds_ad_n  %>% rename("lower.bound" = "low",
"upper.bound" = "up")
get_bds_simes_n = get_bds_simes(n = n, alpha = 0.1, k_low = n/2, k_up = n/2) %>% mutate("Empirical.CDF.values" = 1:n/n) %>% mutate(Method = "Simes")
get_bds_simes_n = get_bds_simes_n  %>% rename("lower.bound" = "low",
"upper.bound" = "up")
get_bds_fin = rbind(get_bds_dw_n, get_bds_dkw_n, get_bds_eic_n, get_bds_ad_n, get_bds_simes_n) %>% as.data.frame()
#get_bds_fin = rbind(get_bds_dw_n, get_bds_dkw_n, get_bds_eic_n,get_bds_ad_n) %>% as.data.frame()
get_bds_fin = get_bds_fin %>% mutate(lower.centred = lower.bound -  Empirical.CDF.values)
get_bds_fin = get_bds_fin %>% mutate(upper.centred = upper.bound -  Empirical.CDF.values)
ggplot(data = get_bds_fin, aes(x = Empirical.CDF.values, y = lower.bound, colour = Method)) +
geom_line() +
geom_line(data = get_bds_fin, aes(x = Empirical.CDF.values , y = upper.bound, colour = Method)) +
geom_point(aes(y =Empirical.CDF.values, x =Empirical.CDF.values), col = "black") +
ylab("") +
theme(legend.position="bottom")+
ggtitle(expression( paste("Comparison of methods with ", delta," = 0.1, n = ",100, sep = "")))+
theme(text = element_text(size = 15))
ggplot(data = get_bds_fin %>% filter(Empirical.CDF.values < 0.25), aes(x = Empirical.CDF.values, y = lower.centred, colour = Method)) +
geom_line() +
geom_line(data = get_bds_fin %>% filter(Empirical.CDF.values < 0.25), aes(x = Empirical.CDF.values , y = upper.centred, colour = Method)) +
ylab("centred") +
theme(legend.position="bottom")+
ggtitle(expression( paste("Comparison of methods with ", delta," = 0.1, n = ",100, sep = "")))+
theme(text = element_text(size = 15))
#ggsave("/Users/sidsarkar/Desktop/Conf/DCP_fin/compareMethod.pdf")
# #################
# n_runs = 10000
# meth_flag = data.frame(method = get_bds_fin$Method %>% unique(), prop = rep(0,5))
#
# pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
#                      max = n_runs, # Maximum value of the progress bar
#                      style = 3,    # Progress bar style (also available style = 1 and style = 2)
#                      width = 50,   # Progress bar width. Defaults to getOption("width")
#                      char = "=")
# for( i in 1:n_runs)
# {
#   U_samp = sort(runif(n))
#   for(j in 1:5)
#   {
#     temp_low = prod(U_samp > get_bds_fin %>% filter(Method == meth_flag$method[j]) %>% select(lower.bound))
#     temp_up = prod(U_samp < get_bds_fin %>% filter(Method == meth_flag$method[j]) %>% select(upper.bound))
#     meth_flag[j,"prop"] = meth_flag[j,"prop"] + (temp_up*temp_low)
#   }
#   setTxtProgressBar(pb,i)
# }
# meth_flag$prop = meth_flag$prop/n_runs
# meth_flag
